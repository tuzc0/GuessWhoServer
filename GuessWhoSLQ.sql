
IF DB_ID('AdivinaQuienDB') IS NULL
BEGIN
  CREATE DATABASE AdivinaQuienDB;
END
GO

USE AdivinaQuienDB;
GO

IF NOT EXISTS (
  SELECT 1 FROM sys.databases 
  WHERE name = 'AdivinaQuienDB' AND is_read_committed_snapshot_on = 1
)
BEGIN
  ALTER DATABASE AdivinaQuienDB SET READ_COMMITTED_SNAPSHOT ON WITH ROLLBACK IMMEDIATE;
END
GO

IF OBJECT_ID('VW_ACTIVE_MATCHES','V') IS NOT NULL DROP VIEW VW_ACTIVE_MATCHES;
IF OBJECT_ID('VW_USER_FRIENDS','V')   IS NOT NULL DROP VIEW VW_USER_FRIENDS;

IF OBJECT_ID('sp_AcceptFriendRequest','P') IS NOT NULL DROP PROCEDURE sp_AcceptFriendRequest;
IF OBJECT_ID('sp_CreateFriendRequest','P') IS NOT NULL DROP PROCEDURE sp_CreateFriendRequest;

IF OBJECT_ID('trg_Match_WinnerIsPlayer','TR') IS NOT NULL DROP TRIGGER trg_Match_WinnerIsPlayer;
IF OBJECT_ID('trg_Account_Timestamps','TR')   IS NOT NULL DROP TRIGGER trg_Account_Timestamps;

IF OBJECT_ID('MATCH_INVITATION','U') IS NOT NULL DROP TABLE MATCH_INVITATION;
IF OBJECT_ID('MATCH_PLAYER','U')     IS NOT NULL DROP TABLE MATCH_PLAYER;
IF OBJECT_ID('[MATCH]','U')          IS NOT NULL DROP TABLE [MATCH];

IF OBJECT_ID('CHARACTER','U')        IS NOT NULL DROP TABLE CHARACTER;
IF OBJECT_ID('CHARACTER_SET','U')    IS NOT NULL DROP TABLE CHARACTER_SET;

IF OBJECT_ID('MODERATION_ACTION','U') IS NOT NULL DROP TABLE MODERATION_ACTION;
IF OBJECT_ID('FRIENDSHIP','U')        IS NOT NULL DROP TABLE FRIENDSHIP;
IF OBJECT_ID('FRIEND_REQUEST','U')    IS NOT NULL DROP TABLE FRIEND_REQUEST;

IF OBJECT_ID('ACCOUNT','U')        IS NOT NULL DROP TABLE ACCOUNT;
IF OBJECT_ID('USER_PROFILE','U')   IS NOT NULL DROP TABLE USER_PROFILE;
IF OBJECT_ID('AVATAR','U')         IS NOT NULL DROP TABLE AVATAR;

IF OBJECT_ID('ModerationScope','U')        IS NOT NULL DROP TABLE ModerationScope;
IF OBJECT_ID('ModerationActionType','U')   IS NOT NULL DROP TABLE ModerationActionType;
IF OBJECT_ID('MatchVisibility','U')        IS NOT NULL DROP TABLE MatchVisibility;
IF OBJECT_ID('MatchStatus','U')            IS NOT NULL DROP TABLE MatchStatus;
IF OBJECT_ID('FriendRequestStatus','U')    IS NOT NULL DROP TABLE FriendRequestStatus;
GO

CREATE TABLE FriendRequestStatus (
  StatusId TINYINT PRIMARY KEY,
  Name     NVARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE MatchStatus (
  StatusId TINYINT PRIMARY KEY,
  Name     NVARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE MatchVisibility (
  VisibilityId TINYINT PRIMARY KEY,
  Name         NVARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE ModerationActionType (
  ActionTypeId TINYINT PRIMARY KEY,
  Name         NVARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE ModerationScope (
  ScopeId TINYINT PRIMARY KEY,
  Name    NVARCHAR(50) NOT NULL UNIQUE
);
GO

CREATE TABLE AVATAR (
  AvatarId      BIGINT IDENTITY(1,1) PRIMARY KEY,
  StorageUrl    NVARCHAR(400) NOT NULL,
  IsDefault     BIT NOT NULL DEFAULT 0,
  CreatedAtUtc  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);

CREATE TABLE USER_PROFILE (
  UserId        BIGINT IDENTITY(1,1) PRIMARY KEY,
  DisplayName   NVARCHAR(50) NOT NULL,
  IsActive      BIT NOT NULL DEFAULT 1,
  CreatedAtUtc  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  AvatarId      BIGINT NULL,
  RowVersion    ROWVERSION NOT NULL,
  CONSTRAINT FK_USER_PROFILE_AVATAR
    FOREIGN KEY (AvatarId) REFERENCES AVATAR(AvatarId) ON DELETE SET NULL
);
CREATE INDEX IX_USER_PROFILE_DisplayName ON USER_PROFILE(DisplayName);
CREATE INDEX IX_USER_PROFILE_AvatarId   ON USER_PROFILE(AvatarId);

CREATE TABLE ACCOUNT (
  AccountId       BIGINT IDENTITY(1,1) PRIMARY KEY,
  UserId          BIGINT NOT NULL UNIQUE,
  Email           NVARCHAR(254) NOT NULL UNIQUE,
  Password        VARBINARY(512) NOT NULL,
  IsEmailVerified BIT NOT NULL DEFAULT 0,
  LastLoginUtc    DATETIME2 NULL,
  FailedLogins    INT NOT NULL DEFAULT 0,
  LockedUntilUtc  DATETIME2 NULL,
  CreatedAtUtc    DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  UpdatedAtUtc    DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  CONSTRAINT FK_ACCOUNT_USER_PROFILE FOREIGN KEY (UserId) REFERENCES USER_PROFILE(UserId)
);
CREATE INDEX IX_ACCOUNT_Email ON ACCOUNT(Email);
GO

CREATE TRIGGER trg_Account_Timestamps
ON ACCOUNT
AFTER UPDATE
AS
BEGIN
  SET NOCOUNT ON;
  UPDATE a
    SET UpdatedAtUtc = SYSUTCDATETIME()
  FROM ACCOUNT a
  JOIN inserted i ON i.AccountId = a.AccountId;
END;
GO

CREATE TABLE FRIEND_REQUEST (
  FriendRequestId BIGINT IDENTITY(1,1) PRIMARY KEY,
  RequesterUserId BIGINT NOT NULL,
  AddresseeUserId BIGINT NOT NULL,
  StatusId        TINYINT NOT NULL 
      CONSTRAINT DF_FRIEND_REQUEST_Status DEFAULT(1)
      REFERENCES FriendRequestStatus(StatusId),
  CreatedAtUtc    DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  RespondedAtUtc  DATETIME2 NULL,
  CONSTRAINT FK_FR_REQ_Requester FOREIGN KEY (RequesterUserId) REFERENCES USER_PROFILE(UserId),
  CONSTRAINT FK_FR_REQ_Addressee FOREIGN KEY (AddresseeUserId) REFERENCES USER_PROFILE(UserId),
  CONSTRAINT CK_FRIEND_REQUEST_Self CHECK (RequesterUserId <> AddresseeUserId)
);

CREATE UNIQUE INDEX UX_FRIEND_REQUEST_Pending
ON FRIEND_REQUEST(RequesterUserId, AddresseeUserId)
WHERE StatusId = 1;

CREATE TABLE FRIENDSHIP (
  FriendshipId BIGINT IDENTITY(1,1) PRIMARY KEY,
  User1Id      BIGINT NOT NULL,
  User2Id      BIGINT NOT NULL,
  CreatedAtUtc DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  UserIdLow    AS (CASE WHEN User1Id<User2Id THEN User1Id ELSE User2Id END) PERSISTED,
  UserIdHigh   AS (CASE WHEN User1Id<User2Id THEN User2Id ELSE User1Id END) PERSISTED,
  CONSTRAINT FK_FRIENDSHIP_USER1 FOREIGN KEY (User1Id) REFERENCES USER_PROFILE(UserId),
  CONSTRAINT FK_FRIENDSHIP_USER2 FOREIGN KEY (User2Id) REFERENCES USER_PROFILE(UserId),
  CONSTRAINT CK_FRIENDSHIP_USERS CHECK (User1Id <> User2Id),
  CONSTRAINT UQ_FRIENDSHIP_Pair UNIQUE (UserIdLow, UserIdHigh)
);
CREATE INDEX IX_FRIENDSHIP_USERS ON FRIENDSHIP(User1Id, User2Id);
GO

CREATE TABLE CHARACTER_SET (
  CharacterSetId BIGINT IDENTITY(1,1) PRIMARY KEY,
  Name           NVARCHAR(50) NOT NULL,
  IsActive       BIT NOT NULL DEFAULT 1,
  CreatedAtUtc   DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);

CREATE TABLE CHARACTER (
  CharacterId     BIGINT IDENTITY(1,1) PRIMARY KEY,
  CharacterSetId  BIGINT NOT NULL,
  DisplayName     NVARCHAR(50) NOT NULL,
  ImageUrl        NVARCHAR(400) NOT NULL,
  IsActive        BIT NOT NULL DEFAULT 1,
  CONSTRAINT FK_CHARACTER_SET FOREIGN KEY (CharacterSetId) REFERENCES CHARACTER_SET(CharacterSetId)
);
CREATE INDEX IX_CHARACTER_Set ON CHARACTER(CharacterSetId);
GO

CREATE TABLE [MATCH] (
  MatchId        BIGINT IDENTITY(1,1) PRIMARY KEY,
  VisibilityId   TINYINT NOT NULL 
      CONSTRAINT DF_MATCH_Visibility DEFAULT(1)
      REFERENCES MatchVisibility(VisibilityId),
  StatusId       TINYINT NOT NULL 
      CONSTRAINT DF_MATCH_Status DEFAULT(1)
      REFERENCES MatchStatus(StatusId),
  Mode           NVARCHAR(50) NOT NULL,
  MatchCode      NVARCHAR(10) NOT NULL UNIQUE,
  StartTime      DATETIME2 NULL,
  EndTime        DATETIME2 NULL,
  WinnerUserId   BIGINT NULL REFERENCES USER_PROFILE(UserId),
  CreatedAtUtc   DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);
CREATE INDEX IX_MATCH_Status ON [MATCH](StatusId);

CREATE TABLE MATCH_PLAYER (
  MatchId        BIGINT NOT NULL REFERENCES [MATCH](MatchId) ON DELETE CASCADE,
  UserId         BIGINT NOT NULL REFERENCES USER_PROFILE(UserId),
  SlotNumber     TINYINT NULL,
  IsWinner       BIT NOT NULL DEFAULT 0,
  JoinedAtUtc    DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  LeftAtUtc      DATETIME2 NULL,
  CONSTRAINT PK_MATCH_PLAYER PRIMARY KEY (MatchId, UserId),
  CONSTRAINT UQ_MATCH_PLAYER_Slot UNIQUE (MatchId, SlotNumber)
);
CREATE INDEX IX_MATCH_PLAYER_User ON MATCH_PLAYER(UserId);
GO

CREATE TRIGGER trg_Match_WinnerIsPlayer
ON [MATCH]
AFTER INSERT, UPDATE
AS
BEGIN
  SET NOCOUNT ON;

  IF EXISTS (
    SELECT 1
    FROM inserted i
    WHERE i.WinnerUserId IS NOT NULL
      AND NOT EXISTS (
        SELECT 1 FROM MATCH_PLAYER mp
        WHERE mp.MatchId = i.MatchId AND mp.UserId = i.WinnerUserId
      )
  )
  BEGIN
    ROLLBACK TRANSACTION;
    RETURN;  
  END
END;
GO

CREATE TABLE MATCH_INVITATION (
  MatchInvitationId BIGINT IDENTITY(1,1) PRIMARY KEY,
  MatchId           BIGINT NOT NULL REFERENCES [MATCH](MatchId) ON DELETE CASCADE,
  InviterUserId     BIGINT NOT NULL REFERENCES USER_PROFILE(UserId),
  TargetUserId      BIGINT NULL REFERENCES USER_PROFILE(UserId),
  TargetEmail       NVARCHAR(254) NULL,
  Token             UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(),
  InvitationStatus  TINYINT NOT NULL CONSTRAINT DF_INV_Status DEFAULT(1),
  CreatedAtUtc      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  RespondedAtUtc    DATETIME2 NULL,
  CONSTRAINT CHK_INV_Target CHECK (TargetUserId IS NOT NULL OR TargetEmail IS NOT NULL)
);
CREATE UNIQUE INDEX UQ_MATCH_INVITATION_Token ON MATCH_INVITATION(Token);
CREATE INDEX IX_MATCH_INVITATION_Status ON MATCH_INVITATION(InvitationStatus);
GO

CREATE TABLE MODERATION_ACTION (
  ModerationId     BIGINT IDENTITY(1,1) PRIMARY KEY,
  TargetUserId     BIGINT NOT NULL REFERENCES USER_PROFILE(UserId),
  ModeratorUserId  BIGINT NULL  REFERENCES USER_PROFILE(UserId),
  ActionTypeId     TINYINT NOT NULL REFERENCES ModerationActionType(ActionTypeId),
  Reason           NVARCHAR(255) NOT NULL,
  DurationMinutes  INT NOT NULL,
  ScopeId          TINYINT NOT NULL REFERENCES ModerationScope(ScopeId),
  MatchId          BIGINT NULL REFERENCES [MATCH](MatchId),
  CreatedAtUtc     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  ExpiresAtUtc     AS (DATEADD(MINUTE, DurationMinutes, CreatedAtUtc)) PERSISTED,
  CONSTRAINT CK_MOD_Duration CHECK (DurationMinutes >= 0),
  CONSTRAINT CK_MOD_MatchScope CHECK ((ScopeId <> 2) OR (ScopeId = 2 AND MatchId IS NOT NULL))
);
CREATE INDEX IX_MOD_Target  ON MODERATION_ACTION(TargetUserId);
CREATE INDEX IX_MOD_Expires ON MODERATION_ACTION(ExpiresAtUtc);
GO


CREATE PROCEDURE sp_CreateFriendRequest
  @RequesterUserId BIGINT,
  @AddresseeUserId BIGINT
AS
BEGIN
  SET NOCOUNT ON;

  IF @RequesterUserId = @AddresseeUserId
    RETURN 10;

  IF EXISTS (
    SELECT 1 FROM FRIENDSHIP 
    WHERE (UserIdLow  = CASE WHEN @RequesterUserId<@AddresseeUserId THEN @RequesterUserId ELSE @AddresseeUserId END)
      AND (UserIdHigh = CASE WHEN @RequesterUserId<@AddresseeUserId THEN @AddresseeUserId ELSE @RequesterUserId END)
  )
    RETURN 0;

  IF EXISTS (
    SELECT 1 FROM FRIEND_REQUEST
    WHERE RequesterUserId=@RequesterUserId AND AddresseeUserId=@AddresseeUserId AND StatusId=1
  )
    RETURN 0;

  INSERT INTO FRIEND_REQUEST(RequesterUserId, AddresseeUserId, StatusId)
  VALUES(@RequesterUserId, @AddresseeUserId, 1);

  RETURN 0;
END;
GO

CREATE PROCEDURE sp_AcceptFriendRequest
  @FriendRequestId BIGINT
AS
BEGIN
  SET NOCOUNT ON;
  BEGIN TRAN;

  DECLARE @req BIGINT, @addr BIGINT;
  SELECT @req = RequesterUserId, @addr = AddresseeUserId
  FROM FRIEND_REQUEST WITH (UPDLOCK, ROWLOCK)
  WHERE FriendRequestId = @FriendRequestId AND StatusId = 1;

  IF @req IS NULL
  BEGIN
    ROLLBACK TRAN;
    RETURN 20;
  END

  UPDATE FRIEND_REQUEST
    SET StatusId = 2, RespondedAtUtc = SYSUTCDATETIME()
  WHERE FriendRequestId = @FriendRequestId;

  INSERT INTO FRIENDSHIP(User1Id, User2Id)
  SELECT @req, @addr
  WHERE NOT EXISTS (
    SELECT 1 FROM FRIENDSHIP 
    WHERE (UserIdLow  = CASE WHEN @req<@addr THEN @req ELSE @addr END)
      AND (UserIdHigh = CASE WHEN @req<@addr THEN @addr ELSE @req END)
  );

  COMMIT TRAN;
  RETURN 0;
END;
GO
